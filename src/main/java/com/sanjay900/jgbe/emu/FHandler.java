package com.sanjay900.jgbe.emu;
/*
 *  IMPORTANT: THIS FILE IS AUTOGENERATED
 *
 *  Any modifications to this file will be lost when regenerating it.
 *  Modify the corresponding .jpp file instead, and regenerate this file.
 */






import java.awt.Font;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;


public final class FHandler {

 private static FHandler fhinstance = new FHandler();

 public static InputStream getInputStream(Path fname) throws IOException {
  String error = "";
  try {
   return new FileInputStream(fname.toFile());
  } catch (Exception e) {
   error = error + e.toString() + '\n';
  };
  throw new IOException(error);
 }


 public static DataInputStream getDataInputStream(String fname) throws IOException {

  InputStream instr = getInputStream(Paths.get(fname));

  int dotPos=0;
  int dp = fname.indexOf(".");
  while(dp>=0) {
   dotPos=dp;
   dp=fname.indexOf(".",dp+1);
  }
  String fext = fname.substring(dotPos);
  if ( !fext.equals(".zip") ) {
   DataInputStream distream = new DataInputStream(instr);
   return distream;
  }
  else {

   ZipInputStream zistream = new ZipInputStream(instr);


   ZipEntry entry = zistream.getNextEntry();

   BufferedInputStream bistream = new BufferedInputStream(zistream);
   DataInputStream distream = new DataInputStream(bistream);

   return distream;
  }



 }

 public static DataOutputStream getDataOutputStream(String fname) throws IOException {

  int dotPos=0;
  int dp = fname.indexOf(".");
  while(dp>0) {
   dotPos=dp;
   dp=fname.indexOf(".",dp+1);
  }
  String fext = fname.substring(dotPos);
  if ( !fext.equals(".zip") ) {

   FileOutputStream fostream = new FileOutputStream(fname);
   BufferedOutputStream bostream = new BufferedOutputStream(fostream);
   DataOutputStream dostream = new DataOutputStream(bostream);

   return dostream;
  }
  else {
   System.out.println("FHandler opening zipfile not supported!");
   return null;
  }



 }

 public static final BufferedInputStream getResourceStream(String filename) throws IOException {
  Class clazz = fhinstance.getClass();
  InputStream fistream = clazz.getResourceAsStream(filename);
  BufferedInputStream bistream = new BufferedInputStream(fistream);
  return bistream;
 }







 public static final Font getVeraMonoFont() {
  try {
   InputStream bistream = getResourceStream("VeraMono.ttf");
   Font base = Font.createFont(Font.TRUETYPE_FONT, bistream);
   bistream.close();
   return base.deriveFont(0, 12);
  }
  catch (Exception e) {
   System.out.println("Error while loading font, using fallback font");
   return new Font("Bitstream Vera Sans Mono",0, 12);
  }
 }


}
